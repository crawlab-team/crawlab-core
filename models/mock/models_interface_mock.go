// Code generated by MockGen. DO NOT EDIT.
// Source: ./interface.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	interfaces "github.com/crawlab-team/crawlab-core/interfaces"
	models "github.com/crawlab-team/crawlab-core/models/models"
	mongo "github.com/crawlab-team/crawlab-db/mongo"
	gomock "github.com/golang/mock/gomock"
	bson "go.mongodb.org/mongo-driver/bson"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockModelService is a mock of ModelService interface.
type MockModelService struct {
	ctrl     *gomock.Controller
	recorder *MockModelServiceMockRecorder
}

// MockModelServiceMockRecorder is the mock recorder for MockModelService.
type MockModelServiceMockRecorder struct {
	mock *MockModelService
}

// NewMockModelService creates a new mock instance.
func NewMockModelService(ctrl *gomock.Controller) *MockModelService {
	mock := &MockModelService{ctrl: ctrl}
	mock.recorder = &MockModelServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelService) EXPECT() *MockModelServiceMockRecorder {
	return m.recorder
}

// DropAll mocks base method.
func (m *MockModelService) DropAll() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropAll")
	ret0, _ := ret[0].(error)
	return ret0
}

// DropAll indicates an expected call of DropAll.
func (mr *MockModelServiceMockRecorder) DropAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropAll", reflect.TypeOf((*MockModelService)(nil).DropAll))
}

// GetArtifact mocks base method.
func (m *MockModelService) GetArtifact(query bson.M, opts *mongo.FindOptions) (*models.Artifact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtifact", query, opts)
	ret0, _ := ret[0].(*models.Artifact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtifact indicates an expected call of GetArtifact.
func (mr *MockModelServiceMockRecorder) GetArtifact(query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtifact", reflect.TypeOf((*MockModelService)(nil).GetArtifact), query, opts)
}

// GetArtifactById mocks base method.
func (m *MockModelService) GetArtifactById(id primitive.ObjectID) (*models.Artifact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtifactById", id)
	ret0, _ := ret[0].(*models.Artifact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtifactById indicates an expected call of GetArtifactById.
func (mr *MockModelServiceMockRecorder) GetArtifactById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtifactById", reflect.TypeOf((*MockModelService)(nil).GetArtifactById), id)
}

// GetArtifactList mocks base method.
func (m *MockModelService) GetArtifactList(query bson.M, opts *mongo.FindOptions) ([]models.Artifact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtifactList", query, opts)
	ret0, _ := ret[0].([]models.Artifact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtifactList indicates an expected call of GetArtifactList.
func (mr *MockModelServiceMockRecorder) GetArtifactList(query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtifactList", reflect.TypeOf((*MockModelService)(nil).GetArtifactList), query, opts)
}

// GetBaseService mocks base method.
func (m *MockModelService) GetBaseService(id interfaces.ModelId) interfaces.ModelBaseService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBaseService", id)
	ret0, _ := ret[0].(interfaces.ModelBaseService)
	return ret0
}

// GetBaseService indicates an expected call of GetBaseService.
func (mr *MockModelServiceMockRecorder) GetBaseService(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBaseService", reflect.TypeOf((*MockModelService)(nil).GetBaseService), id)
}

// GetDataCollection mocks base method.
func (m *MockModelService) GetDataCollection(query bson.M, opts *mongo.FindOptions) (*models.DataCollection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataCollection", query, opts)
	ret0, _ := ret[0].(*models.DataCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataCollection indicates an expected call of GetDataCollection.
func (mr *MockModelServiceMockRecorder) GetDataCollection(query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataCollection", reflect.TypeOf((*MockModelService)(nil).GetDataCollection), query, opts)
}

// GetDataCollectionById mocks base method.
func (m *MockModelService) GetDataCollectionById(id primitive.ObjectID) (*models.DataCollection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataCollectionById", id)
	ret0, _ := ret[0].(*models.DataCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataCollectionById indicates an expected call of GetDataCollectionById.
func (mr *MockModelServiceMockRecorder) GetDataCollectionById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataCollectionById", reflect.TypeOf((*MockModelService)(nil).GetDataCollectionById), id)
}

// GetDataCollectionByName mocks base method.
func (m *MockModelService) GetDataCollectionByName(name string, opts *mongo.FindOptions) (*models.DataCollection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataCollectionByName", name, opts)
	ret0, _ := ret[0].(*models.DataCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataCollectionByName indicates an expected call of GetDataCollectionByName.
func (mr *MockModelServiceMockRecorder) GetDataCollectionByName(name, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataCollectionByName", reflect.TypeOf((*MockModelService)(nil).GetDataCollectionByName), name, opts)
}

// GetDataCollectionList mocks base method.
func (m *MockModelService) GetDataCollectionList(query bson.M, opts *mongo.FindOptions) ([]models.DataCollection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataCollectionList", query, opts)
	ret0, _ := ret[0].([]models.DataCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataCollectionList indicates an expected call of GetDataCollectionList.
func (mr *MockModelServiceMockRecorder) GetDataCollectionList(query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataCollectionList", reflect.TypeOf((*MockModelService)(nil).GetDataCollectionList), query, opts)
}

// GetDataSource mocks base method.
func (m *MockModelService) GetDataSource(query bson.M, opts *mongo.FindOptions) (*models.DataSource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataSource", query, opts)
	ret0, _ := ret[0].(*models.DataSource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataSource indicates an expected call of GetDataSource.
func (mr *MockModelServiceMockRecorder) GetDataSource(query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataSource", reflect.TypeOf((*MockModelService)(nil).GetDataSource), query, opts)
}

// GetDataSourceById mocks base method.
func (m *MockModelService) GetDataSourceById(id primitive.ObjectID) (*models.DataSource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataSourceById", id)
	ret0, _ := ret[0].(*models.DataSource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataSourceById indicates an expected call of GetDataSourceById.
func (mr *MockModelServiceMockRecorder) GetDataSourceById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataSourceById", reflect.TypeOf((*MockModelService)(nil).GetDataSourceById), id)
}

// GetDataSourceList mocks base method.
func (m *MockModelService) GetDataSourceList(query bson.M, opts *mongo.FindOptions) ([]models.DataSource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataSourceList", query, opts)
	ret0, _ := ret[0].([]models.DataSource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataSourceList indicates an expected call of GetDataSourceList.
func (mr *MockModelServiceMockRecorder) GetDataSourceList(query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataSourceList", reflect.TypeOf((*MockModelService)(nil).GetDataSourceList), query, opts)
}

// GetExtraValue mocks base method.
func (m *MockModelService) GetExtraValue(query bson.M, opts *mongo.FindOptions) (*models.ExtraValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExtraValue", query, opts)
	ret0, _ := ret[0].(*models.ExtraValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExtraValue indicates an expected call of GetExtraValue.
func (mr *MockModelServiceMockRecorder) GetExtraValue(query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExtraValue", reflect.TypeOf((*MockModelService)(nil).GetExtraValue), query, opts)
}

// GetExtraValueById mocks base method.
func (m *MockModelService) GetExtraValueById(id primitive.ObjectID) (*models.ExtraValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExtraValueById", id)
	ret0, _ := ret[0].(*models.ExtraValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExtraValueById indicates an expected call of GetExtraValueById.
func (mr *MockModelServiceMockRecorder) GetExtraValueById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExtraValueById", reflect.TypeOf((*MockModelService)(nil).GetExtraValueById), id)
}

// GetExtraValueByObjectIdModel mocks base method.
func (m_2 *MockModelService) GetExtraValueByObjectIdModel(oid primitive.ObjectID, m string, opts *mongo.FindOptions) (*models.ExtraValue, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "GetExtraValueByObjectIdModel", oid, m, opts)
	ret0, _ := ret[0].(*models.ExtraValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExtraValueByObjectIdModel indicates an expected call of GetExtraValueByObjectIdModel.
func (mr *MockModelServiceMockRecorder) GetExtraValueByObjectIdModel(oid, m, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExtraValueByObjectIdModel", reflect.TypeOf((*MockModelService)(nil).GetExtraValueByObjectIdModel), oid, m, opts)
}

// GetExtraValueList mocks base method.
func (m *MockModelService) GetExtraValueList(query bson.M, opts *mongo.FindOptions) ([]models.ExtraValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExtraValueList", query, opts)
	ret0, _ := ret[0].([]models.ExtraValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExtraValueList indicates an expected call of GetExtraValueList.
func (mr *MockModelServiceMockRecorder) GetExtraValueList(query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExtraValueList", reflect.TypeOf((*MockModelService)(nil).GetExtraValueList), query, opts)
}

// GetGit mocks base method.
func (m *MockModelService) GetGit(query bson.M, opts *mongo.FindOptions) (*models.Git, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGit", query, opts)
	ret0, _ := ret[0].(*models.Git)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGit indicates an expected call of GetGit.
func (mr *MockModelServiceMockRecorder) GetGit(query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGit", reflect.TypeOf((*MockModelService)(nil).GetGit), query, opts)
}

// GetGitById mocks base method.
func (m *MockModelService) GetGitById(id primitive.ObjectID) (*models.Git, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitById", id)
	ret0, _ := ret[0].(*models.Git)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGitById indicates an expected call of GetGitById.
func (mr *MockModelServiceMockRecorder) GetGitById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitById", reflect.TypeOf((*MockModelService)(nil).GetGitById), id)
}

// GetGitList mocks base method.
func (m *MockModelService) GetGitList(query bson.M, opts *mongo.FindOptions) ([]models.Git, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitList", query, opts)
	ret0, _ := ret[0].([]models.Git)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGitList indicates an expected call of GetGitList.
func (mr *MockModelServiceMockRecorder) GetGitList(query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitList", reflect.TypeOf((*MockModelService)(nil).GetGitList), query, opts)
}

// GetJob mocks base method.
func (m *MockModelService) GetJob(query bson.M, opts *mongo.FindOptions) (*models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJob", query, opts)
	ret0, _ := ret[0].(*models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJob indicates an expected call of GetJob.
func (mr *MockModelServiceMockRecorder) GetJob(query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJob", reflect.TypeOf((*MockModelService)(nil).GetJob), query, opts)
}

// GetJobById mocks base method.
func (m *MockModelService) GetJobById(id primitive.ObjectID) (*models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobById", id)
	ret0, _ := ret[0].(*models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobById indicates an expected call of GetJobById.
func (mr *MockModelServiceMockRecorder) GetJobById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobById", reflect.TypeOf((*MockModelService)(nil).GetJobById), id)
}

// GetJobList mocks base method.
func (m *MockModelService) GetJobList(query bson.M, opts *mongo.FindOptions) ([]models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobList", query, opts)
	ret0, _ := ret[0].([]models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobList indicates an expected call of GetJobList.
func (mr *MockModelServiceMockRecorder) GetJobList(query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobList", reflect.TypeOf((*MockModelService)(nil).GetJobList), query, opts)
}

// GetNode mocks base method.
func (m *MockModelService) GetNode(query bson.M, opts *mongo.FindOptions) (*models.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNode", query, opts)
	ret0, _ := ret[0].(*models.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNode indicates an expected call of GetNode.
func (mr *MockModelServiceMockRecorder) GetNode(query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNode", reflect.TypeOf((*MockModelService)(nil).GetNode), query, opts)
}

// GetNodeById mocks base method.
func (m *MockModelService) GetNodeById(id primitive.ObjectID) (*models.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeById", id)
	ret0, _ := ret[0].(*models.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeById indicates an expected call of GetNodeById.
func (mr *MockModelServiceMockRecorder) GetNodeById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeById", reflect.TypeOf((*MockModelService)(nil).GetNodeById), id)
}

// GetNodeByKey mocks base method.
func (m *MockModelService) GetNodeByKey(key string, opts *mongo.FindOptions) (*models.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeByKey", key, opts)
	ret0, _ := ret[0].(*models.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeByKey indicates an expected call of GetNodeByKey.
func (mr *MockModelServiceMockRecorder) GetNodeByKey(key, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeByKey", reflect.TypeOf((*MockModelService)(nil).GetNodeByKey), key, opts)
}

// GetNodeList mocks base method.
func (m *MockModelService) GetNodeList(query bson.M, opts *mongo.FindOptions) ([]models.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeList", query, opts)
	ret0, _ := ret[0].([]models.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeList indicates an expected call of GetNodeList.
func (mr *MockModelServiceMockRecorder) GetNodeList(query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeList", reflect.TypeOf((*MockModelService)(nil).GetNodeList), query, opts)
}

// GetPassword mocks base method.
func (m *MockModelService) GetPassword(query bson.M, opts *mongo.FindOptions) (*models.Password, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPassword", query, opts)
	ret0, _ := ret[0].(*models.Password)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPassword indicates an expected call of GetPassword.
func (mr *MockModelServiceMockRecorder) GetPassword(query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPassword", reflect.TypeOf((*MockModelService)(nil).GetPassword), query, opts)
}

// GetPasswordById mocks base method.
func (m *MockModelService) GetPasswordById(id primitive.ObjectID) (*models.Password, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPasswordById", id)
	ret0, _ := ret[0].(*models.Password)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPasswordById indicates an expected call of GetPasswordById.
func (mr *MockModelServiceMockRecorder) GetPasswordById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPasswordById", reflect.TypeOf((*MockModelService)(nil).GetPasswordById), id)
}

// GetPasswordList mocks base method.
func (m *MockModelService) GetPasswordList(query bson.M, opts *mongo.FindOptions) ([]models.Password, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPasswordList", query, opts)
	ret0, _ := ret[0].([]models.Password)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPasswordList indicates an expected call of GetPasswordList.
func (mr *MockModelServiceMockRecorder) GetPasswordList(query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPasswordList", reflect.TypeOf((*MockModelService)(nil).GetPasswordList), query, opts)
}

// GetPermission mocks base method.
func (m *MockModelService) GetPermission(query bson.M, opts *mongo.FindOptions) (*models.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermission", query, opts)
	ret0, _ := ret[0].(*models.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermission indicates an expected call of GetPermission.
func (mr *MockModelServiceMockRecorder) GetPermission(query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermission", reflect.TypeOf((*MockModelService)(nil).GetPermission), query, opts)
}

// GetPermissionById mocks base method.
func (m *MockModelService) GetPermissionById(id primitive.ObjectID) (*models.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissionById", id)
	ret0, _ := ret[0].(*models.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissionById indicates an expected call of GetPermissionById.
func (mr *MockModelServiceMockRecorder) GetPermissionById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissionById", reflect.TypeOf((*MockModelService)(nil).GetPermissionById), id)
}

// GetPermissionByKey mocks base method.
func (m *MockModelService) GetPermissionByKey(key string, opts *mongo.FindOptions) (*models.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissionByKey", key, opts)
	ret0, _ := ret[0].(*models.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissionByKey indicates an expected call of GetPermissionByKey.
func (mr *MockModelServiceMockRecorder) GetPermissionByKey(key, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissionByKey", reflect.TypeOf((*MockModelService)(nil).GetPermissionByKey), key, opts)
}

// GetPermissionList mocks base method.
func (m *MockModelService) GetPermissionList(query bson.M, opts *mongo.FindOptions) ([]models.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissionList", query, opts)
	ret0, _ := ret[0].([]models.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissionList indicates an expected call of GetPermissionList.
func (mr *MockModelServiceMockRecorder) GetPermissionList(query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissionList", reflect.TypeOf((*MockModelService)(nil).GetPermissionList), query, opts)
}

// GetPlugin mocks base method.
func (m *MockModelService) GetPlugin(query bson.M, opts *mongo.FindOptions) (*models.Plugin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlugin", query, opts)
	ret0, _ := ret[0].(*models.Plugin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlugin indicates an expected call of GetPlugin.
func (mr *MockModelServiceMockRecorder) GetPlugin(query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlugin", reflect.TypeOf((*MockModelService)(nil).GetPlugin), query, opts)
}

// GetPluginById mocks base method.
func (m *MockModelService) GetPluginById(id primitive.ObjectID) (*models.Plugin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPluginById", id)
	ret0, _ := ret[0].(*models.Plugin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPluginById indicates an expected call of GetPluginById.
func (mr *MockModelServiceMockRecorder) GetPluginById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPluginById", reflect.TypeOf((*MockModelService)(nil).GetPluginById), id)
}

// GetPluginByName mocks base method.
func (m *MockModelService) GetPluginByName(name string) (*models.Plugin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPluginByName", name)
	ret0, _ := ret[0].(*models.Plugin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPluginByName indicates an expected call of GetPluginByName.
func (mr *MockModelServiceMockRecorder) GetPluginByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPluginByName", reflect.TypeOf((*MockModelService)(nil).GetPluginByName), name)
}

// GetPluginList mocks base method.
func (m *MockModelService) GetPluginList(query bson.M, opts *mongo.FindOptions) ([]models.Plugin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPluginList", query, opts)
	ret0, _ := ret[0].([]models.Plugin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPluginList indicates an expected call of GetPluginList.
func (mr *MockModelServiceMockRecorder) GetPluginList(query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPluginList", reflect.TypeOf((*MockModelService)(nil).GetPluginList), query, opts)
}

// GetPluginStatus mocks base method.
func (m *MockModelService) GetPluginStatus(query bson.M, opts *mongo.FindOptions) (*models.PluginStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPluginStatus", query, opts)
	ret0, _ := ret[0].(*models.PluginStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPluginStatus indicates an expected call of GetPluginStatus.
func (mr *MockModelServiceMockRecorder) GetPluginStatus(query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPluginStatus", reflect.TypeOf((*MockModelService)(nil).GetPluginStatus), query, opts)
}

// GetPluginStatusById mocks base method.
func (m *MockModelService) GetPluginStatusById(id primitive.ObjectID) (*models.PluginStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPluginStatusById", id)
	ret0, _ := ret[0].(*models.PluginStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPluginStatusById indicates an expected call of GetPluginStatusById.
func (mr *MockModelServiceMockRecorder) GetPluginStatusById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPluginStatusById", reflect.TypeOf((*MockModelService)(nil).GetPluginStatusById), id)
}

// GetPluginStatusList mocks base method.
func (m *MockModelService) GetPluginStatusList(query bson.M, opts *mongo.FindOptions) ([]models.PluginStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPluginStatusList", query, opts)
	ret0, _ := ret[0].([]models.PluginStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPluginStatusList indicates an expected call of GetPluginStatusList.
func (mr *MockModelServiceMockRecorder) GetPluginStatusList(query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPluginStatusList", reflect.TypeOf((*MockModelService)(nil).GetPluginStatusList), query, opts)
}

// GetProject mocks base method.
func (m *MockModelService) GetProject(query bson.M, opts *mongo.FindOptions) (*models.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProject", query, opts)
	ret0, _ := ret[0].(*models.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProject indicates an expected call of GetProject.
func (mr *MockModelServiceMockRecorder) GetProject(query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProject", reflect.TypeOf((*MockModelService)(nil).GetProject), query, opts)
}

// GetProjectById mocks base method.
func (m *MockModelService) GetProjectById(id primitive.ObjectID) (*models.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectById", id)
	ret0, _ := ret[0].(*models.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectById indicates an expected call of GetProjectById.
func (mr *MockModelServiceMockRecorder) GetProjectById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectById", reflect.TypeOf((*MockModelService)(nil).GetProjectById), id)
}

// GetProjectList mocks base method.
func (m *MockModelService) GetProjectList(query bson.M, opts *mongo.FindOptions) ([]models.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectList", query, opts)
	ret0, _ := ret[0].([]models.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectList indicates an expected call of GetProjectList.
func (mr *MockModelServiceMockRecorder) GetProjectList(query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectList", reflect.TypeOf((*MockModelService)(nil).GetProjectList), query, opts)
}

// GetRole mocks base method.
func (m *MockModelService) GetRole(query bson.M, opts *mongo.FindOptions) (*models.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRole", query, opts)
	ret0, _ := ret[0].(*models.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRole indicates an expected call of GetRole.
func (mr *MockModelServiceMockRecorder) GetRole(query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*MockModelService)(nil).GetRole), query, opts)
}

// GetRoleById mocks base method.
func (m *MockModelService) GetRoleById(id primitive.ObjectID) (*models.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleById", id)
	ret0, _ := ret[0].(*models.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleById indicates an expected call of GetRoleById.
func (mr *MockModelServiceMockRecorder) GetRoleById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleById", reflect.TypeOf((*MockModelService)(nil).GetRoleById), id)
}

// GetRoleByKey mocks base method.
func (m *MockModelService) GetRoleByKey(key string, opts *mongo.FindOptions) (*models.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleByKey", key, opts)
	ret0, _ := ret[0].(*models.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleByKey indicates an expected call of GetRoleByKey.
func (mr *MockModelServiceMockRecorder) GetRoleByKey(key, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleByKey", reflect.TypeOf((*MockModelService)(nil).GetRoleByKey), key, opts)
}

// GetRoleByName mocks base method.
func (m *MockModelService) GetRoleByName(name string, opts *mongo.FindOptions) (*models.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleByName", name, opts)
	ret0, _ := ret[0].(*models.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleByName indicates an expected call of GetRoleByName.
func (mr *MockModelServiceMockRecorder) GetRoleByName(name, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleByName", reflect.TypeOf((*MockModelService)(nil).GetRoleByName), name, opts)
}

// GetRoleList mocks base method.
func (m *MockModelService) GetRoleList(query bson.M, opts *mongo.FindOptions) ([]models.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleList", query, opts)
	ret0, _ := ret[0].([]models.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleList indicates an expected call of GetRoleList.
func (mr *MockModelServiceMockRecorder) GetRoleList(query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleList", reflect.TypeOf((*MockModelService)(nil).GetRoleList), query, opts)
}

// GetRolePermission mocks base method.
func (m *MockModelService) GetRolePermission(query bson.M, opts *mongo.FindOptions) (*models.RolePermission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRolePermission", query, opts)
	ret0, _ := ret[0].(*models.RolePermission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRolePermission indicates an expected call of GetRolePermission.
func (mr *MockModelServiceMockRecorder) GetRolePermission(query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRolePermission", reflect.TypeOf((*MockModelService)(nil).GetRolePermission), query, opts)
}

// GetRolePermissionList mocks base method.
func (m *MockModelService) GetRolePermissionList(query bson.M, opts *mongo.FindOptions) ([]models.RolePermission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRolePermissionList", query, opts)
	ret0, _ := ret[0].([]models.RolePermission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRolePermissionList indicates an expected call of GetRolePermissionList.
func (mr *MockModelServiceMockRecorder) GetRolePermissionList(query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRolePermissionList", reflect.TypeOf((*MockModelService)(nil).GetRolePermissionList), query, opts)
}

// GetRolePermissionListByPermissionId mocks base method.
func (m *MockModelService) GetRolePermissionListByPermissionId(id primitive.ObjectID, opts *mongo.FindOptions) ([]models.RolePermission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRolePermissionListByPermissionId", id, opts)
	ret0, _ := ret[0].([]models.RolePermission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRolePermissionListByPermissionId indicates an expected call of GetRolePermissionListByPermissionId.
func (mr *MockModelServiceMockRecorder) GetRolePermissionListByPermissionId(id, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRolePermissionListByPermissionId", reflect.TypeOf((*MockModelService)(nil).GetRolePermissionListByPermissionId), id, opts)
}

// GetRolePermissionListByRoleId mocks base method.
func (m *MockModelService) GetRolePermissionListByRoleId(id primitive.ObjectID, opts *mongo.FindOptions) ([]models.RolePermission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRolePermissionListByRoleId", id, opts)
	ret0, _ := ret[0].([]models.RolePermission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRolePermissionListByRoleId indicates an expected call of GetRolePermissionListByRoleId.
func (mr *MockModelServiceMockRecorder) GetRolePermissionListByRoleId(id, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRolePermissionListByRoleId", reflect.TypeOf((*MockModelService)(nil).GetRolePermissionListByRoleId), id, opts)
}

// GetSchedule mocks base method.
func (m *MockModelService) GetSchedule(query bson.M, opts *mongo.FindOptions) (*models.Schedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchedule", query, opts)
	ret0, _ := ret[0].(*models.Schedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchedule indicates an expected call of GetSchedule.
func (mr *MockModelServiceMockRecorder) GetSchedule(query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchedule", reflect.TypeOf((*MockModelService)(nil).GetSchedule), query, opts)
}

// GetScheduleById mocks base method.
func (m *MockModelService) GetScheduleById(id primitive.ObjectID) (*models.Schedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScheduleById", id)
	ret0, _ := ret[0].(*models.Schedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScheduleById indicates an expected call of GetScheduleById.
func (mr *MockModelServiceMockRecorder) GetScheduleById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScheduleById", reflect.TypeOf((*MockModelService)(nil).GetScheduleById), id)
}

// GetScheduleList mocks base method.
func (m *MockModelService) GetScheduleList(query bson.M, opts *mongo.FindOptions) ([]models.Schedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScheduleList", query, opts)
	ret0, _ := ret[0].([]models.Schedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScheduleList indicates an expected call of GetScheduleList.
func (mr *MockModelServiceMockRecorder) GetScheduleList(query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScheduleList", reflect.TypeOf((*MockModelService)(nil).GetScheduleList), query, opts)
}

// GetSetting mocks base method.
func (m *MockModelService) GetSetting(query bson.M, opts *mongo.FindOptions) (*models.Setting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSetting", query, opts)
	ret0, _ := ret[0].(*models.Setting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSetting indicates an expected call of GetSetting.
func (mr *MockModelServiceMockRecorder) GetSetting(query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSetting", reflect.TypeOf((*MockModelService)(nil).GetSetting), query, opts)
}

// GetSettingById mocks base method.
func (m *MockModelService) GetSettingById(id primitive.ObjectID) (*models.Setting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSettingById", id)
	ret0, _ := ret[0].(*models.Setting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSettingById indicates an expected call of GetSettingById.
func (mr *MockModelServiceMockRecorder) GetSettingById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSettingById", reflect.TypeOf((*MockModelService)(nil).GetSettingById), id)
}

// GetSettingByKey mocks base method.
func (m *MockModelService) GetSettingByKey(key string, opts *mongo.FindOptions) (*models.Setting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSettingByKey", key, opts)
	ret0, _ := ret[0].(*models.Setting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSettingByKey indicates an expected call of GetSettingByKey.
func (mr *MockModelServiceMockRecorder) GetSettingByKey(key, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSettingByKey", reflect.TypeOf((*MockModelService)(nil).GetSettingByKey), key, opts)
}

// GetSettingList mocks base method.
func (m *MockModelService) GetSettingList(query bson.M, opts *mongo.FindOptions) ([]models.Setting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSettingList", query, opts)
	ret0, _ := ret[0].([]models.Setting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSettingList indicates an expected call of GetSettingList.
func (mr *MockModelServiceMockRecorder) GetSettingList(query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSettingList", reflect.TypeOf((*MockModelService)(nil).GetSettingList), query, opts)
}

// GetSpider mocks base method.
func (m *MockModelService) GetSpider(query bson.M, opts *mongo.FindOptions) (*models.Spider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpider", query, opts)
	ret0, _ := ret[0].(*models.Spider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpider indicates an expected call of GetSpider.
func (mr *MockModelServiceMockRecorder) GetSpider(query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpider", reflect.TypeOf((*MockModelService)(nil).GetSpider), query, opts)
}

// GetSpiderById mocks base method.
func (m *MockModelService) GetSpiderById(id primitive.ObjectID) (*models.Spider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpiderById", id)
	ret0, _ := ret[0].(*models.Spider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpiderById indicates an expected call of GetSpiderById.
func (mr *MockModelServiceMockRecorder) GetSpiderById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpiderById", reflect.TypeOf((*MockModelService)(nil).GetSpiderById), id)
}

// GetSpiderList mocks base method.
func (m *MockModelService) GetSpiderList(query bson.M, opts *mongo.FindOptions) ([]models.Spider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpiderList", query, opts)
	ret0, _ := ret[0].([]models.Spider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpiderList indicates an expected call of GetSpiderList.
func (mr *MockModelServiceMockRecorder) GetSpiderList(query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpiderList", reflect.TypeOf((*MockModelService)(nil).GetSpiderList), query, opts)
}

// GetSpiderStat mocks base method.
func (m *MockModelService) GetSpiderStat(query bson.M, opts *mongo.FindOptions) (*models.SpiderStat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpiderStat", query, opts)
	ret0, _ := ret[0].(*models.SpiderStat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpiderStat indicates an expected call of GetSpiderStat.
func (mr *MockModelServiceMockRecorder) GetSpiderStat(query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpiderStat", reflect.TypeOf((*MockModelService)(nil).GetSpiderStat), query, opts)
}

// GetSpiderStatById mocks base method.
func (m *MockModelService) GetSpiderStatById(id primitive.ObjectID) (*models.SpiderStat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpiderStatById", id)
	ret0, _ := ret[0].(*models.SpiderStat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpiderStatById indicates an expected call of GetSpiderStatById.
func (mr *MockModelServiceMockRecorder) GetSpiderStatById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpiderStatById", reflect.TypeOf((*MockModelService)(nil).GetSpiderStatById), id)
}

// GetSpiderStatList mocks base method.
func (m *MockModelService) GetSpiderStatList(query bson.M, opts *mongo.FindOptions) ([]models.SpiderStat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpiderStatList", query, opts)
	ret0, _ := ret[0].([]models.SpiderStat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpiderStatList indicates an expected call of GetSpiderStatList.
func (mr *MockModelServiceMockRecorder) GetSpiderStatList(query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpiderStatList", reflect.TypeOf((*MockModelService)(nil).GetSpiderStatList), query, opts)
}

// GetTag mocks base method.
func (m *MockModelService) GetTag(query bson.M, opts *mongo.FindOptions) (*models.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTag", query, opts)
	ret0, _ := ret[0].(*models.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTag indicates an expected call of GetTag.
func (mr *MockModelServiceMockRecorder) GetTag(query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTag", reflect.TypeOf((*MockModelService)(nil).GetTag), query, opts)
}

// GetTagById mocks base method.
func (m *MockModelService) GetTagById(id primitive.ObjectID) (*models.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagById", id)
	ret0, _ := ret[0].(*models.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagById indicates an expected call of GetTagById.
func (mr *MockModelServiceMockRecorder) GetTagById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagById", reflect.TypeOf((*MockModelService)(nil).GetTagById), id)
}

// GetTagIds mocks base method.
func (m *MockModelService) GetTagIds(colName string, tags []interfaces.Tag) ([]primitive.ObjectID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagIds", colName, tags)
	ret0, _ := ret[0].([]primitive.ObjectID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagIds indicates an expected call of GetTagIds.
func (mr *MockModelServiceMockRecorder) GetTagIds(colName, tags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagIds", reflect.TypeOf((*MockModelService)(nil).GetTagIds), colName, tags)
}

// GetTagList mocks base method.
func (m *MockModelService) GetTagList(query bson.M, opts *mongo.FindOptions) ([]models.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagList", query, opts)
	ret0, _ := ret[0].([]models.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagList indicates an expected call of GetTagList.
func (mr *MockModelServiceMockRecorder) GetTagList(query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagList", reflect.TypeOf((*MockModelService)(nil).GetTagList), query, opts)
}

// GetTask mocks base method.
func (m *MockModelService) GetTask(query bson.M, opts *mongo.FindOptions) (*models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", query, opts)
	ret0, _ := ret[0].(*models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask.
func (mr *MockModelServiceMockRecorder) GetTask(query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockModelService)(nil).GetTask), query, opts)
}

// GetTaskById mocks base method.
func (m *MockModelService) GetTaskById(id primitive.ObjectID) (*models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskById", id)
	ret0, _ := ret[0].(*models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskById indicates an expected call of GetTaskById.
func (mr *MockModelServiceMockRecorder) GetTaskById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskById", reflect.TypeOf((*MockModelService)(nil).GetTaskById), id)
}

// GetTaskList mocks base method.
func (m *MockModelService) GetTaskList(query bson.M, opts *mongo.FindOptions) ([]models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskList", query, opts)
	ret0, _ := ret[0].([]models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskList indicates an expected call of GetTaskList.
func (mr *MockModelServiceMockRecorder) GetTaskList(query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskList", reflect.TypeOf((*MockModelService)(nil).GetTaskList), query, opts)
}

// GetTaskQueueItem mocks base method.
func (m *MockModelService) GetTaskQueueItem(query bson.M, opts *mongo.FindOptions) (*models.TaskQueueItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskQueueItem", query, opts)
	ret0, _ := ret[0].(*models.TaskQueueItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskQueueItem indicates an expected call of GetTaskQueueItem.
func (mr *MockModelServiceMockRecorder) GetTaskQueueItem(query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskQueueItem", reflect.TypeOf((*MockModelService)(nil).GetTaskQueueItem), query, opts)
}

// GetTaskQueueItemById mocks base method.
func (m *MockModelService) GetTaskQueueItemById(id primitive.ObjectID) (*models.TaskQueueItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskQueueItemById", id)
	ret0, _ := ret[0].(*models.TaskQueueItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskQueueItemById indicates an expected call of GetTaskQueueItemById.
func (mr *MockModelServiceMockRecorder) GetTaskQueueItemById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskQueueItemById", reflect.TypeOf((*MockModelService)(nil).GetTaskQueueItemById), id)
}

// GetTaskQueueItemList mocks base method.
func (m *MockModelService) GetTaskQueueItemList(query bson.M, opts *mongo.FindOptions) ([]models.TaskQueueItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskQueueItemList", query, opts)
	ret0, _ := ret[0].([]models.TaskQueueItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskQueueItemList indicates an expected call of GetTaskQueueItemList.
func (mr *MockModelServiceMockRecorder) GetTaskQueueItemList(query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskQueueItemList", reflect.TypeOf((*MockModelService)(nil).GetTaskQueueItemList), query, opts)
}

// GetTaskStat mocks base method.
func (m *MockModelService) GetTaskStat(query bson.M, opts *mongo.FindOptions) (*models.TaskStat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskStat", query, opts)
	ret0, _ := ret[0].(*models.TaskStat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskStat indicates an expected call of GetTaskStat.
func (mr *MockModelServiceMockRecorder) GetTaskStat(query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskStat", reflect.TypeOf((*MockModelService)(nil).GetTaskStat), query, opts)
}

// GetTaskStatById mocks base method.
func (m *MockModelService) GetTaskStatById(id primitive.ObjectID) (*models.TaskStat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskStatById", id)
	ret0, _ := ret[0].(*models.TaskStat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskStatById indicates an expected call of GetTaskStatById.
func (mr *MockModelServiceMockRecorder) GetTaskStatById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskStatById", reflect.TypeOf((*MockModelService)(nil).GetTaskStatById), id)
}

// GetTaskStatList mocks base method.
func (m *MockModelService) GetTaskStatList(query bson.M, opts *mongo.FindOptions) ([]models.TaskStat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskStatList", query, opts)
	ret0, _ := ret[0].([]models.TaskStat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskStatList indicates an expected call of GetTaskStatList.
func (mr *MockModelServiceMockRecorder) GetTaskStatList(query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskStatList", reflect.TypeOf((*MockModelService)(nil).GetTaskStatList), query, opts)
}

// GetToken mocks base method.
func (m *MockModelService) GetToken(query bson.M, opts *mongo.FindOptions) (*models.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken", query, opts)
	ret0, _ := ret[0].(*models.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToken indicates an expected call of GetToken.
func (mr *MockModelServiceMockRecorder) GetToken(query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockModelService)(nil).GetToken), query, opts)
}

// GetTokenById mocks base method.
func (m *MockModelService) GetTokenById(id primitive.ObjectID) (*models.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenById", id)
	ret0, _ := ret[0].(*models.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokenById indicates an expected call of GetTokenById.
func (mr *MockModelServiceMockRecorder) GetTokenById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenById", reflect.TypeOf((*MockModelService)(nil).GetTokenById), id)
}

// GetTokenList mocks base method.
func (m *MockModelService) GetTokenList(query bson.M, opts *mongo.FindOptions) ([]models.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenList", query, opts)
	ret0, _ := ret[0].([]models.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokenList indicates an expected call of GetTokenList.
func (mr *MockModelServiceMockRecorder) GetTokenList(query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenList", reflect.TypeOf((*MockModelService)(nil).GetTokenList), query, opts)
}

// GetUser mocks base method.
func (m *MockModelService) GetUser(query bson.M, opts *mongo.FindOptions) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", query, opts)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockModelServiceMockRecorder) GetUser(query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockModelService)(nil).GetUser), query, opts)
}

// GetUserById mocks base method.
func (m *MockModelService) GetUserById(id primitive.ObjectID) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", id)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockModelServiceMockRecorder) GetUserById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockModelService)(nil).GetUserById), id)
}

// GetUserByUsername mocks base method.
func (m *MockModelService) GetUserByUsername(username string, opts *mongo.FindOptions) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", username, opts)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockModelServiceMockRecorder) GetUserByUsername(username, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockModelService)(nil).GetUserByUsername), username, opts)
}

// GetUserByUsernameWithPassword mocks base method.
func (m *MockModelService) GetUserByUsernameWithPassword(username string, opts *mongo.FindOptions) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsernameWithPassword", username, opts)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsernameWithPassword indicates an expected call of GetUserByUsernameWithPassword.
func (mr *MockModelServiceMockRecorder) GetUserByUsernameWithPassword(username, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsernameWithPassword", reflect.TypeOf((*MockModelService)(nil).GetUserByUsernameWithPassword), username, opts)
}

// GetUserList mocks base method.
func (m *MockModelService) GetUserList(query bson.M, opts *mongo.FindOptions) ([]models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserList", query, opts)
	ret0, _ := ret[0].([]models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserList indicates an expected call of GetUserList.
func (mr *MockModelServiceMockRecorder) GetUserList(query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserList", reflect.TypeOf((*MockModelService)(nil).GetUserList), query, opts)
}

// GetUserRole mocks base method.
func (m *MockModelService) GetUserRole(query bson.M, opts *mongo.FindOptions) (*models.UserRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRole", query, opts)
	ret0, _ := ret[0].(*models.UserRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRole indicates an expected call of GetUserRole.
func (mr *MockModelServiceMockRecorder) GetUserRole(query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRole", reflect.TypeOf((*MockModelService)(nil).GetUserRole), query, opts)
}

// GetUserRoleById mocks base method.
func (m *MockModelService) GetUserRoleById(id primitive.ObjectID) (*models.UserRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRoleById", id)
	ret0, _ := ret[0].(*models.UserRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRoleById indicates an expected call of GetUserRoleById.
func (mr *MockModelServiceMockRecorder) GetUserRoleById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRoleById", reflect.TypeOf((*MockModelService)(nil).GetUserRoleById), id)
}

// GetUserRoleList mocks base method.
func (m *MockModelService) GetUserRoleList(query bson.M, opts *mongo.FindOptions) ([]models.UserRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRoleList", query, opts)
	ret0, _ := ret[0].([]models.UserRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRoleList indicates an expected call of GetUserRoleList.
func (mr *MockModelServiceMockRecorder) GetUserRoleList(query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRoleList", reflect.TypeOf((*MockModelService)(nil).GetUserRoleList), query, opts)
}

// GetUserRoleListByRoleId mocks base method.
func (m *MockModelService) GetUserRoleListByRoleId(id primitive.ObjectID, opts *mongo.FindOptions) ([]models.UserRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRoleListByRoleId", id, opts)
	ret0, _ := ret[0].([]models.UserRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRoleListByRoleId indicates an expected call of GetUserRoleListByRoleId.
func (mr *MockModelServiceMockRecorder) GetUserRoleListByRoleId(id, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRoleListByRoleId", reflect.TypeOf((*MockModelService)(nil).GetUserRoleListByRoleId), id, opts)
}

// GetUserRoleListByUserId mocks base method.
func (m *MockModelService) GetUserRoleListByUserId(id primitive.ObjectID, opts *mongo.FindOptions) ([]models.UserRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRoleListByUserId", id, opts)
	ret0, _ := ret[0].([]models.UserRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRoleListByUserId indicates an expected call of GetUserRoleListByUserId.
func (mr *MockModelServiceMockRecorder) GetUserRoleListByUserId(id, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRoleListByUserId", reflect.TypeOf((*MockModelService)(nil).GetUserRoleListByUserId), id, opts)
}

// GetVariable mocks base method.
func (m *MockModelService) GetVariable(query bson.M, opts *mongo.FindOptions) (*models.Variable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVariable", query, opts)
	ret0, _ := ret[0].(*models.Variable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVariable indicates an expected call of GetVariable.
func (mr *MockModelServiceMockRecorder) GetVariable(query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVariable", reflect.TypeOf((*MockModelService)(nil).GetVariable), query, opts)
}

// GetVariableById mocks base method.
func (m *MockModelService) GetVariableById(id primitive.ObjectID) (*models.Variable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVariableById", id)
	ret0, _ := ret[0].(*models.Variable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVariableById indicates an expected call of GetVariableById.
func (mr *MockModelServiceMockRecorder) GetVariableById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVariableById", reflect.TypeOf((*MockModelService)(nil).GetVariableById), id)
}

// GetVariableByKey mocks base method.
func (m *MockModelService) GetVariableByKey(key string, opts *mongo.FindOptions) (*models.Variable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVariableByKey", key, opts)
	ret0, _ := ret[0].(*models.Variable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVariableByKey indicates an expected call of GetVariableByKey.
func (mr *MockModelServiceMockRecorder) GetVariableByKey(key, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVariableByKey", reflect.TypeOf((*MockModelService)(nil).GetVariableByKey), key, opts)
}

// GetVariableList mocks base method.
func (m *MockModelService) GetVariableList(query bson.M, opts *mongo.FindOptions) ([]models.Variable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVariableList", query, opts)
	ret0, _ := ret[0].([]models.Variable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVariableList indicates an expected call of GetVariableList.
func (mr *MockModelServiceMockRecorder) GetVariableList(query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVariableList", reflect.TypeOf((*MockModelService)(nil).GetVariableList), query, opts)
}

// UpdateTags mocks base method.
func (m *MockModelService) UpdateTags(colName string, query bson.M, tags []interfaces.Tag) ([]primitive.ObjectID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTags", colName, query, tags)
	ret0, _ := ret[0].([]primitive.ObjectID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTags indicates an expected call of UpdateTags.
func (mr *MockModelServiceMockRecorder) UpdateTags(colName, query, tags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTags", reflect.TypeOf((*MockModelService)(nil).UpdateTags), colName, query, tags)
}

// UpdateTagsById mocks base method.
func (m *MockModelService) UpdateTagsById(colName string, id primitive.ObjectID, tags []interfaces.Tag) ([]primitive.ObjectID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTagsById", colName, id, tags)
	ret0, _ := ret[0].([]primitive.ObjectID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTagsById indicates an expected call of UpdateTagsById.
func (mr *MockModelServiceMockRecorder) UpdateTagsById(colName, id, tags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTagsById", reflect.TypeOf((*MockModelService)(nil).UpdateTagsById), colName, id, tags)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces/task_scheduler_service.go

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	reflect "reflect"
	time "time"

	interfaces "github.com/crawlab-team/crawlab-core/interfaces"
	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockTaskSchedulerService is a mock of TaskSchedulerService interface.
type MockTaskSchedulerService struct {
	ctrl     *gomock.Controller
	recorder *MockTaskSchedulerServiceMockRecorder
}

// MockTaskSchedulerServiceMockRecorder is the mock recorder for MockTaskSchedulerService.
type MockTaskSchedulerServiceMockRecorder struct {
	mock *MockTaskSchedulerService
}

// NewMockTaskSchedulerService creates a new mock instance.
func NewMockTaskSchedulerService(ctrl *gomock.Controller) *MockTaskSchedulerService {
	mock := &MockTaskSchedulerService{ctrl: ctrl}
	mock.recorder = &MockTaskSchedulerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskSchedulerService) EXPECT() *MockTaskSchedulerServiceMockRecorder {
	return m.recorder
}

// Cancel mocks base method.
func (m *MockTaskSchedulerService) Cancel(id primitive.ObjectID, args ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{id}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Cancel", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Cancel indicates an expected call of Cancel.
func (mr *MockTaskSchedulerServiceMockRecorder) Cancel(id interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{id}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockTaskSchedulerService)(nil).Cancel), varargs...)
}

// Dequeue mocks base method.
func (m *MockTaskSchedulerService) Dequeue() ([]interfaces.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dequeue")
	ret0, _ := ret[0].([]interfaces.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dequeue indicates an expected call of Dequeue.
func (mr *MockTaskSchedulerServiceMockRecorder) Dequeue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dequeue", reflect.TypeOf((*MockTaskSchedulerService)(nil).Dequeue))
}

// DequeueAndSchedule mocks base method.
func (m *MockTaskSchedulerService) DequeueAndSchedule() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DequeueAndSchedule")
}

// DequeueAndSchedule indicates an expected call of DequeueAndSchedule.
func (mr *MockTaskSchedulerServiceMockRecorder) DequeueAndSchedule() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DequeueAndSchedule", reflect.TypeOf((*MockTaskSchedulerService)(nil).DequeueAndSchedule))
}

// Enqueue mocks base method.
func (m *MockTaskSchedulerService) Enqueue(t interfaces.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enqueue", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// Enqueue indicates an expected call of Enqueue.
func (mr *MockTaskSchedulerServiceMockRecorder) Enqueue(t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enqueue", reflect.TypeOf((*MockTaskSchedulerService)(nil).Enqueue), t)
}

// GetConfigPath mocks base method.
func (m *MockTaskSchedulerService) GetConfigPath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetConfigPath indicates an expected call of GetConfigPath.
func (mr *MockTaskSchedulerServiceMockRecorder) GetConfigPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigPath", reflect.TypeOf((*MockTaskSchedulerService)(nil).GetConfigPath))
}

// GetQueue mocks base method.
func (m *MockTaskSchedulerService) GetQueue(nodeId primitive.ObjectID) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueue", nodeId)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetQueue indicates an expected call of GetQueue.
func (mr *MockTaskSchedulerServiceMockRecorder) GetQueue(nodeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueue", reflect.TypeOf((*MockTaskSchedulerService)(nil).GetQueue), nodeId)
}

// Init mocks base method.
func (m *MockTaskSchedulerService) Init() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockTaskSchedulerServiceMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockTaskSchedulerService)(nil).Init))
}

// IsStopped mocks base method.
func (m *MockTaskSchedulerService) IsStopped() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsStopped")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsStopped indicates an expected call of IsStopped.
func (mr *MockTaskSchedulerServiceMockRecorder) IsStopped() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsStopped", reflect.TypeOf((*MockTaskSchedulerService)(nil).IsStopped))
}

// SaveTask mocks base method.
func (m *MockTaskSchedulerService) SaveTask(t interfaces.Task, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTask", t, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTask indicates an expected call of SaveTask.
func (mr *MockTaskSchedulerServiceMockRecorder) SaveTask(t, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTask", reflect.TypeOf((*MockTaskSchedulerService)(nil).SaveTask), t, status)
}

// Schedule mocks base method.
func (m *MockTaskSchedulerService) Schedule(tasks []interfaces.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Schedule", tasks)
	ret0, _ := ret[0].(error)
	return ret0
}

// Schedule indicates an expected call of Schedule.
func (mr *MockTaskSchedulerServiceMockRecorder) Schedule(tasks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Schedule", reflect.TypeOf((*MockTaskSchedulerService)(nil).Schedule), tasks)
}

// SetConfigPath mocks base method.
func (m *MockTaskSchedulerService) SetConfigPath(path string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetConfigPath", path)
}

// SetConfigPath indicates an expected call of SetConfigPath.
func (mr *MockTaskSchedulerServiceMockRecorder) SetConfigPath(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfigPath", reflect.TypeOf((*MockTaskSchedulerService)(nil).SetConfigPath), path)
}

// SetInterval mocks base method.
func (m *MockTaskSchedulerService) SetInterval(interval time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetInterval", interval)
}

// SetInterval indicates an expected call of SetInterval.
func (mr *MockTaskSchedulerServiceMockRecorder) SetInterval(interval interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInterval", reflect.TypeOf((*MockTaskSchedulerService)(nil).SetInterval), interval)
}

// Start mocks base method.
func (m *MockTaskSchedulerService) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockTaskSchedulerServiceMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockTaskSchedulerService)(nil).Start))
}

// Stop mocks base method.
func (m *MockTaskSchedulerService) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockTaskSchedulerServiceMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockTaskSchedulerService)(nil).Stop))
}

// Wait mocks base method.
func (m *MockTaskSchedulerService) Wait() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Wait")
}

// Wait indicates an expected call of Wait.
func (mr *MockTaskSchedulerServiceMockRecorder) Wait() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockTaskSchedulerService)(nil).Wait))
}

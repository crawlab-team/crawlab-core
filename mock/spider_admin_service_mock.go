// Code generated by MockGen. DO NOT EDIT.
// Source: ./spider_admin_service.go

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	reflect "reflect"

	interfaces "github.com/crawlab-team/crawlab-core/interfaces"
	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockSpiderAdminService is a mock of SpiderAdminService interface.
type MockSpiderAdminService struct {
	ctrl     *gomock.Controller
	recorder *MockSpiderAdminServiceMockRecorder
}

// MockSpiderAdminServiceMockRecorder is the mock recorder for MockSpiderAdminService.
type MockSpiderAdminServiceMockRecorder struct {
	mock *MockSpiderAdminService
}

// NewMockSpiderAdminService creates a new mock instance.
func NewMockSpiderAdminService(ctrl *gomock.Controller) *MockSpiderAdminService {
	mock := &MockSpiderAdminService{ctrl: ctrl}
	mock.recorder = &MockSpiderAdminServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpiderAdminService) EXPECT() *MockSpiderAdminServiceMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockSpiderAdminService) Clone(id primitive.ObjectID, opts *interfaces.SpiderCloneOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone", id, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockSpiderAdminServiceMockRecorder) Clone(id, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockSpiderAdminService)(nil).Clone), id, opts)
}

// Delete mocks base method.
func (m *MockSpiderAdminService) Delete(id primitive.ObjectID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSpiderAdminServiceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSpiderAdminService)(nil).Delete), id)
}

// GetConfigPath mocks base method.
func (m *MockSpiderAdminService) GetConfigPath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetConfigPath indicates an expected call of GetConfigPath.
func (mr *MockSpiderAdminServiceMockRecorder) GetConfigPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigPath", reflect.TypeOf((*MockSpiderAdminService)(nil).GetConfigPath))
}

// Schedule mocks base method.
func (m *MockSpiderAdminService) Schedule(id primitive.ObjectID, opts *interfaces.SpiderRunOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Schedule", id, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Schedule indicates an expected call of Schedule.
func (mr *MockSpiderAdminServiceMockRecorder) Schedule(id, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Schedule", reflect.TypeOf((*MockSpiderAdminService)(nil).Schedule), id, opts)
}

// SetConfigPath mocks base method.
func (m *MockSpiderAdminService) SetConfigPath(path string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetConfigPath", path)
}

// SetConfigPath indicates an expected call of SetConfigPath.
func (mr *MockSpiderAdminServiceMockRecorder) SetConfigPath(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfigPath", reflect.TypeOf((*MockSpiderAdminService)(nil).SetConfigPath), path)
}
